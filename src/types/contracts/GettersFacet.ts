/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type SecondaryChainStruct = {
  valid: PromiseOrValue<boolean>;
  totalPriorityTxs: PromiseOrValue<BigNumberish>;
  totalSyncedPriorityTxs: PromiseOrValue<BigNumberish>;
};

export type SecondaryChainStructOutput = [boolean, BigNumber, BigNumber] & {
  valid: boolean;
  totalPriorityTxs: BigNumber;
  totalSyncedPriorityTxs: BigNumber;
};

export type SecondaryChainOpStruct = {
  gateway: PromiseOrValue<string>;
  priorityOpId: PromiseOrValue<BigNumberish>;
  canonicalTxHash: PromiseOrValue<BytesLike>;
};

export type SecondaryChainOpStructOutput = [string, BigNumber, string] & {
  gateway: string;
  priorityOpId: BigNumber;
  canonicalTxHash: string;
};

export type SecondaryChainSyncStatusStruct = {
  hash: PromiseOrValue<BytesLike>;
  amount: PromiseOrValue<BigNumberish>;
};

export type SecondaryChainSyncStatusStructOutput = [string, BigNumber] & {
  hash: string;
  amount: BigNumber;
};

export type VerifierParamsStruct = {
  recursionNodeLevelVkHash: PromiseOrValue<BytesLike>;
  recursionLeafLevelVkHash: PromiseOrValue<BytesLike>;
  recursionCircuitsSetVksHash: PromiseOrValue<BytesLike>;
};

export type VerifierParamsStructOutput = [string, string, string] & {
  recursionNodeLevelVkHash: string;
  recursionLeafLevelVkHash: string;
  recursionCircuitsSetVksHash: string;
};

export type PriorityOperationStruct = {
  canonicalTxHash: PromiseOrValue<BytesLike>;
  expirationTimestamp: PromiseOrValue<BigNumberish>;
  layer2Tip: PromiseOrValue<BigNumberish>;
};

export type PriorityOperationStructOutput = [string, BigNumber, BigNumber] & {
  canonicalTxHash: string;
  expirationTimestamp: BigNumber;
  layer2Tip: BigNumber;
};

export declare namespace IGetters {
  export type FacetStruct = {
    addr: PromiseOrValue<string>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface GettersFacetInterface extends utils.Interface {
  functions: {
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getCanonicalTxHash(bytes32)": FunctionFragment;
    "getFirstUnprocessedPriorityTx()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getL2BootloaderBytecodeHash()": FunctionFragment;
    "getL2DefaultAccountBytecodeHash()": FunctionFragment;
    "getL2SystemContractsUpgradeBatchNumber()": FunctionFragment;
    "getL2SystemContractsUpgradeBlockNumber()": FunctionFragment;
    "getL2SystemContractsUpgradeTxHash()": FunctionFragment;
    "getName()": FunctionFragment;
    "getPendingGovernor()": FunctionFragment;
    "getPriorityQueueSize()": FunctionFragment;
    "getPriorityTxMaxGasLimit()": FunctionFragment;
    "getProtocolVersion()": FunctionFragment;
    "getSecondaryChain(address)": FunctionFragment;
    "getSecondaryChainOp(bytes32)": FunctionFragment;
    "getSecondaryChainSyncStatus(address,uint256)": FunctionFragment;
    "getTotalBatchesCommitted()": FunctionFragment;
    "getTotalBatchesExecuted()": FunctionFragment;
    "getTotalBatchesVerified()": FunctionFragment;
    "getTotalBlocksCommitted()": FunctionFragment;
    "getTotalBlocksExecuted()": FunctionFragment;
    "getTotalBlocksVerified()": FunctionFragment;
    "getTotalPriorityTxs()": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "getVerifierParams()": FunctionFragment;
    "isDiamondStorageFrozen()": FunctionFragment;
    "isEthWithdrawalFinalized(uint256,uint256)": FunctionFragment;
    "isFacetFreezable(address)": FunctionFragment;
    "isFunctionFreezable(bytes4)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "l2LogsRootHash(uint256)": FunctionFragment;
    "priorityQueueFrontOperation()": FunctionFragment;
    "storedBatchHash(uint256)": FunctionFragment;
    "storedBlockHash(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "getCanonicalTxHash"
      | "getFirstUnprocessedPriorityTx"
      | "getGovernor"
      | "getL2BootloaderBytecodeHash"
      | "getL2DefaultAccountBytecodeHash"
      | "getL2SystemContractsUpgradeBatchNumber"
      | "getL2SystemContractsUpgradeBlockNumber"
      | "getL2SystemContractsUpgradeTxHash"
      | "getName"
      | "getPendingGovernor"
      | "getPriorityQueueSize"
      | "getPriorityTxMaxGasLimit"
      | "getProtocolVersion"
      | "getSecondaryChain"
      | "getSecondaryChainOp"
      | "getSecondaryChainSyncStatus"
      | "getTotalBatchesCommitted"
      | "getTotalBatchesExecuted"
      | "getTotalBatchesVerified"
      | "getTotalBlocksCommitted"
      | "getTotalBlocksExecuted"
      | "getTotalBlocksVerified"
      | "getTotalPriorityTxs"
      | "getVerifier"
      | "getVerifierParams"
      | "isDiamondStorageFrozen"
      | "isEthWithdrawalFinalized"
      | "isFacetFreezable"
      | "isFunctionFreezable"
      | "isValidator"
      | "l2LogsRootHash"
      | "priorityQueueFrontOperation"
      | "storedBatchHash"
      | "storedBlockHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCanonicalTxHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BootloaderBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeBatchNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondaryChain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondaryChainOp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondaryChainSyncStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBatchesVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifierParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFacetFreezable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storedBatchHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCanonicalTxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeBatchNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondaryChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondaryChainOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondaryChainSyncStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBatchesVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFacetFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GettersFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GettersFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    facetAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IGetters.FacetStructOutput[]] & { result: IGetters.FacetStructOutput[] }
    >;

    getCanonicalTxHash(
      secondaryChainCanonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGovernor(overrides?: CallOverrides): Promise<[string]>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<[string]>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getL2SystemContractsUpgradeBatchNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getL2SystemContractsUpgradeBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getPendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProtocolVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSecondaryChain(
      gateway: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SecondaryChainStructOutput]>;

    getSecondaryChainOp(
      canonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[SecondaryChainOpStructOutput]>;

    getSecondaryChainSyncStatus(
      gateway: PromiseOrValue<string>,
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SecondaryChainSyncStatusStructOutput]>;

    getTotalBatchesCommitted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBatchesExecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBatchesVerified(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVerifier(overrides?: CallOverrides): Promise<[string]>;

    getVerifierParams(
      overrides?: CallOverrides
    ): Promise<[VerifierParamsStructOutput]>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isFreezable: boolean }>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l2LogsRootHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<[PriorityOperationStructOutput]>;

    storedBatchHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    storedBlockHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  facetAddress(
    _selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IGetters.FacetStructOutput[]>;

  getCanonicalTxHash(
    secondaryChainCanonicalTxHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

  getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

  getL2SystemContractsUpgradeBatchNumber(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getL2SystemContractsUpgradeBlockNumber(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  getPendingGovernor(overrides?: CallOverrides): Promise<string>;

  getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

  getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

  getSecondaryChain(
    gateway: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SecondaryChainStructOutput>;

  getSecondaryChainOp(
    canonicalTxHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<SecondaryChainOpStructOutput>;

  getSecondaryChainSyncStatus(
    gateway: PromiseOrValue<string>,
    priorityOpId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SecondaryChainSyncStatusStructOutput>;

  getTotalBatchesCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBatchesVerified(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  getVerifierParams(
    overrides?: CallOverrides
  ): Promise<VerifierParamsStructOutput>;

  isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

  isEthWithdrawalFinalized(
    _l2BatchNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFacetFreezable(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFunctionFreezable(
    _selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2LogsRootHash(
    _batchNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  priorityQueueFrontOperation(
    overrides?: CallOverrides
  ): Promise<PriorityOperationStructOutput>;

  storedBatchHash(
    _batchNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  storedBlockHash(
    _batchNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<IGetters.FacetStructOutput[]>;

    getCanonicalTxHash(
      secondaryChainCanonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

    getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

    getL2SystemContractsUpgradeBatchNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    getPendingGovernor(overrides?: CallOverrides): Promise<string>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondaryChain(
      gateway: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SecondaryChainStructOutput>;

    getSecondaryChainOp(
      canonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<SecondaryChainOpStructOutput>;

    getSecondaryChainSyncStatus(
      gateway: PromiseOrValue<string>,
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SecondaryChainSyncStatusStructOutput>;

    getTotalBatchesCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesVerified(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    getVerifierParams(
      overrides?: CallOverrides
    ): Promise<VerifierParamsStructOutput>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2LogsRootHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PriorityOperationStructOutput>;

    storedBatchHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    storedBlockHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    getCanonicalTxHash(
      secondaryChainCanonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeBatchNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondaryChain(
      gateway: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondaryChainOp(
      canonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondaryChainSyncStatus(
      gateway: PromiseOrValue<string>,
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBatchesCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBatchesVerified(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifierParams(overrides?: CallOverrides): Promise<BigNumber>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2LogsRootHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<BigNumber>;

    storedBatchHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storedBlockHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    facetAddress(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCanonicalTxHash(
      secondaryChainCanonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL2BootloaderBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2SystemContractsUpgradeBatchNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2SystemContractsUpgradeBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingGovernor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityQueueSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityTxMaxGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondaryChain(
      gateway: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondaryChainOp(
      canonicalTxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondaryChainSyncStatus(
      gateway: PromiseOrValue<string>,
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBatchesCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBatchesExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBatchesVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPriorityTxs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerifierParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDiamondStorageFrozen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEthWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFacetFreezable(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFunctionFreezable(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2LogsRootHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storedBatchHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storedBlockHash(
      _batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
