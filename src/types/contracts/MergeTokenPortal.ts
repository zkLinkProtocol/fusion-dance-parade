/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMergeTokenPortal {
  export type SourceTokenInfoStruct = {
    isSupported: PromiseOrValue<boolean>;
    isLocked: PromiseOrValue<boolean>;
    mergeToken: PromiseOrValue<string>;
    balance: PromiseOrValue<BigNumberish>;
    depositLimit: PromiseOrValue<BigNumberish>;
  };

  export type SourceTokenInfoStructOutput = [
    boolean,
    boolean,
    string,
    BigNumber,
    BigNumber
  ] & {
    isSupported: boolean;
    isLocked: boolean;
    mergeToken: string;
    balance: BigNumber;
    depositLimit: BigNumber;
  };
}

export interface MergeTokenPortalInterface extends utils.Interface {
  functions: {
    "addSourceToken(address,address,uint256)": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "getSourceTokenInfos(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeSourceToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDepositLimit(address,uint256)": FunctionFragment;
    "sourceTokenInfoMap(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDepositStatus(address,bool)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSourceToken"
      | "deposit"
      | "getSourceTokenInfos"
      | "initialize"
      | "owner"
      | "proxiableUUID"
      | "removeSourceToken"
      | "renounceOwnership"
      | "setDepositLimit"
      | "sourceTokenInfoMap"
      | "transferOwnership"
      | "updateDepositStatus"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSourceToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSourceTokenInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSourceToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sourceTokenInfoMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSourceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSourceTokenInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSourceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceTokenInfoMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DepositLimitUpdated(address,uint256)": EventFragment;
    "DepositToMerge(address,address,address,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SourceTokenAdded(address,address,uint256)": EventFragment;
    "SourceTokenLocked(address,bool)": EventFragment;
    "SourceTokenRemoved(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WithdrawFromMerge(address,address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositToMerge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SourceTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SourceTokenLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SourceTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromMerge"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositLimitUpdatedEventObject {
  sourceToken: string;
  depositLimit: BigNumber;
}
export type DepositLimitUpdatedEvent = TypedEvent<
  [string, BigNumber],
  DepositLimitUpdatedEventObject
>;

export type DepositLimitUpdatedEventFilter =
  TypedEventFilter<DepositLimitUpdatedEvent>;

export interface DepositToMergeEventObject {
  sourceToken: string;
  mergeToken: string;
  sender: string;
  amount: BigNumber;
  receiver: string;
}
export type DepositToMergeEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  DepositToMergeEventObject
>;

export type DepositToMergeEventFilter = TypedEventFilter<DepositToMergeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SourceTokenAddedEventObject {
  sourceToken: string;
  mergeToken: string;
  depositLimit: BigNumber;
}
export type SourceTokenAddedEvent = TypedEvent<
  [string, string, BigNumber],
  SourceTokenAddedEventObject
>;

export type SourceTokenAddedEventFilter =
  TypedEventFilter<SourceTokenAddedEvent>;

export interface SourceTokenLockedEventObject {
  sourceToken: string;
  isLocked: boolean;
}
export type SourceTokenLockedEvent = TypedEvent<
  [string, boolean],
  SourceTokenLockedEventObject
>;

export type SourceTokenLockedEventFilter =
  TypedEventFilter<SourceTokenLockedEvent>;

export interface SourceTokenRemovedEventObject {
  sourceToken: string;
}
export type SourceTokenRemovedEvent = TypedEvent<
  [string],
  SourceTokenRemovedEventObject
>;

export type SourceTokenRemovedEventFilter =
  TypedEventFilter<SourceTokenRemovedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawFromMergeEventObject {
  sourceToken: string;
  mergeToken: string;
  sender: string;
  amount: BigNumber;
  receiver: string;
}
export type WithdrawFromMergeEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  WithdrawFromMergeEventObject
>;

export type WithdrawFromMergeEventFilter =
  TypedEventFilter<WithdrawFromMergeEvent>;

export interface MergeTokenPortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MergeTokenPortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSourceToken(
      _sourceToken: PromiseOrValue<string>,
      _mergeToken: PromiseOrValue<string>,
      _depositLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSourceTokenInfos(
      _sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMergeTokenPortal.SourceTokenInfoStructOutput]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeSourceToken(
      _sourceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositLimit(
      _sourceToken: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sourceTokenInfoMap(
      sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, BigNumber, BigNumber] & {
        isSupported: boolean;
        isLocked: boolean;
        mergeToken: string;
        balance: BigNumber;
        depositLimit: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDepositStatus(
      _sourceToken: PromiseOrValue<string>,
      _isLocked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addSourceToken(
    _sourceToken: PromiseOrValue<string>,
    _mergeToken: PromiseOrValue<string>,
    _depositLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _sourceToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSourceTokenInfos(
    _sourceToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMergeTokenPortal.SourceTokenInfoStructOutput>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeSourceToken(
    _sourceToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositLimit(
    _sourceToken: PromiseOrValue<string>,
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sourceTokenInfoMap(
    sourceToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, string, BigNumber, BigNumber] & {
      isSupported: boolean;
      isLocked: boolean;
      mergeToken: string;
      balance: BigNumber;
      depositLimit: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDepositStatus(
    _sourceToken: PromiseOrValue<string>,
    _isLocked: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _sourceToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSourceToken(
      _sourceToken: PromiseOrValue<string>,
      _mergeToken: PromiseOrValue<string>,
      _depositLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSourceTokenInfos(
      _sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMergeTokenPortal.SourceTokenInfoStructOutput>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeSourceToken(
      _sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDepositLimit(
      _sourceToken: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sourceTokenInfoMap(
      sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, BigNumber, BigNumber] & {
        isSupported: boolean;
        isLocked: boolean;
        mergeToken: string;
        balance: BigNumber;
        depositLimit: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDepositStatus(
      _sourceToken: PromiseOrValue<string>,
      _isLocked: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "DepositLimitUpdated(address,uint256)"(
      sourceToken?: PromiseOrValue<string> | null,
      depositLimit?: null
    ): DepositLimitUpdatedEventFilter;
    DepositLimitUpdated(
      sourceToken?: PromiseOrValue<string> | null,
      depositLimit?: null
    ): DepositLimitUpdatedEventFilter;

    "DepositToMerge(address,address,address,uint256,address)"(
      sourceToken?: PromiseOrValue<string> | null,
      mergeToken?: null,
      sender?: null,
      amount?: null,
      receiver?: null
    ): DepositToMergeEventFilter;
    DepositToMerge(
      sourceToken?: PromiseOrValue<string> | null,
      mergeToken?: null,
      sender?: null,
      amount?: null,
      receiver?: null
    ): DepositToMergeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SourceTokenAdded(address,address,uint256)"(
      sourceToken?: PromiseOrValue<string> | null,
      mergeToken?: null,
      depositLimit?: null
    ): SourceTokenAddedEventFilter;
    SourceTokenAdded(
      sourceToken?: PromiseOrValue<string> | null,
      mergeToken?: null,
      depositLimit?: null
    ): SourceTokenAddedEventFilter;

    "SourceTokenLocked(address,bool)"(
      sourceToken?: PromiseOrValue<string> | null,
      isLocked?: null
    ): SourceTokenLockedEventFilter;
    SourceTokenLocked(
      sourceToken?: PromiseOrValue<string> | null,
      isLocked?: null
    ): SourceTokenLockedEventFilter;

    "SourceTokenRemoved(address)"(
      sourceToken?: PromiseOrValue<string> | null
    ): SourceTokenRemovedEventFilter;
    SourceTokenRemoved(
      sourceToken?: PromiseOrValue<string> | null
    ): SourceTokenRemovedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "WithdrawFromMerge(address,address,address,uint256,address)"(
      sourceToken?: PromiseOrValue<string> | null,
      mergeToken?: null,
      sender?: null,
      amount?: null,
      receiver?: null
    ): WithdrawFromMergeEventFilter;
    WithdrawFromMerge(
      sourceToken?: PromiseOrValue<string> | null,
      mergeToken?: null,
      sender?: null,
      amount?: null,
      receiver?: null
    ): WithdrawFromMergeEventFilter;
  };

  estimateGas: {
    addSourceToken(
      _sourceToken: PromiseOrValue<string>,
      _mergeToken: PromiseOrValue<string>,
      _depositLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSourceTokenInfos(
      _sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeSourceToken(
      _sourceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositLimit(
      _sourceToken: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sourceTokenInfoMap(
      sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDepositStatus(
      _sourceToken: PromiseOrValue<string>,
      _isLocked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSourceToken(
      _sourceToken: PromiseOrValue<string>,
      _mergeToken: PromiseOrValue<string>,
      _depositLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSourceTokenInfos(
      _sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSourceToken(
      _sourceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      _sourceToken: PromiseOrValue<string>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sourceTokenInfoMap(
      sourceToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositStatus(
      _sourceToken: PromiseOrValue<string>,
      _isLocked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _sourceToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
