/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IL1BridgeInterface extends utils.Interface {
  functions: {
    "claimFailedDeposit(address,address,bytes32,uint256,uint256,uint16,bytes32[])": FunctionFragment;
    "deposit(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "depositToMerge(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "finalizeWithdrawal(uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "isWithdrawalFinalized(uint256,uint256)": FunctionFragment;
    "l2Bridge()": FunctionFragment;
    "l2TokenAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimFailedDeposit"
      | "deposit"
      | "depositToMerge"
      | "finalizeWithdrawal"
      | "isWithdrawalFinalized"
      | "l2Bridge"
      | "l2TokenAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimFailedDeposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToMerge",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawalFinalized",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "l2Bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2TokenAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimFailedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToMerge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2TokenAddress",
    data: BytesLike
  ): Result;

  events: {
    "ClaimedFailedDeposit(address,address,uint256)": EventFragment;
    "DepositInitiated(bytes32,address,address,address,uint256)": EventFragment;
    "DepositToMergeInitiated(bytes32,address,address,address,uint256,bool)": EventFragment;
    "WithdrawalFinalized(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedFailedDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositToMergeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
}

export interface ClaimedFailedDepositEventObject {
  to: string;
  l1Token: string;
  amount: BigNumber;
}
export type ClaimedFailedDepositEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimedFailedDepositEventObject
>;

export type ClaimedFailedDepositEventFilter =
  TypedEventFilter<ClaimedFailedDepositEvent>;

export interface DepositInitiatedEventObject {
  l2DepositTxHash: string;
  from: string;
  to: string;
  l1Token: string;
  amount: BigNumber;
}
export type DepositInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  DepositInitiatedEventObject
>;

export type DepositInitiatedEventFilter =
  TypedEventFilter<DepositInitiatedEvent>;

export interface DepositToMergeInitiatedEventObject {
  l2DepositTxHash: string;
  from: string;
  to: string;
  l1Token: string;
  amount: BigNumber;
  toMerge: boolean;
}
export type DepositToMergeInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, boolean],
  DepositToMergeInitiatedEventObject
>;

export type DepositToMergeInitiatedEventFilter =
  TypedEventFilter<DepositToMergeInitiatedEvent>;

export interface WithdrawalFinalizedEventObject {
  to: string;
  l1Token: string;
  amount: BigNumber;
}
export type WithdrawalFinalizedEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawalFinalizedEventObject
>;

export type WithdrawalFinalizedEventFilter =
  TypedEventFilter<WithdrawalFinalizedEvent>;

export interface IL1Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IL1BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFailedDeposit(
      _depositSender: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToMerge(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeWithdrawal(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l2Bridge(overrides?: CallOverrides): Promise<[string]>;

    l2TokenAddress(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  claimFailedDeposit(
    _depositSender: PromiseOrValue<string>,
    _l1Token: PromiseOrValue<string>,
    _l2TxHash: PromiseOrValue<BytesLike>,
    _l2BatchNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _l2Receiver: PromiseOrValue<string>,
    _l1Token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _l2TxGasLimit: PromiseOrValue<BigNumberish>,
    _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
    _refundRecipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToMerge(
    _l2Receiver: PromiseOrValue<string>,
    _l1Token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _l2TxGasLimit: PromiseOrValue<BigNumberish>,
    _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
    _refundRecipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeWithdrawal(
    _l2BatchNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<BytesLike>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWithdrawalFinalized(
    _l2BatchNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2Bridge(overrides?: CallOverrides): Promise<string>;

  l2TokenAddress(
    _l1Token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    claimFailedDeposit(
      _depositSender: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    depositToMerge(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    finalizeWithdrawal(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2Bridge(overrides?: CallOverrides): Promise<string>;

    l2TokenAddress(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ClaimedFailedDeposit(address,address,uint256)"(
      to?: PromiseOrValue<string> | null,
      l1Token?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimedFailedDepositEventFilter;
    ClaimedFailedDeposit(
      to?: PromiseOrValue<string> | null,
      l1Token?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimedFailedDepositEventFilter;

    "DepositInitiated(bytes32,address,address,address,uint256)"(
      l2DepositTxHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      l1Token?: null,
      amount?: null
    ): DepositInitiatedEventFilter;
    DepositInitiated(
      l2DepositTxHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      l1Token?: null,
      amount?: null
    ): DepositInitiatedEventFilter;

    "DepositToMergeInitiated(bytes32,address,address,address,uint256,bool)"(
      l2DepositTxHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      l1Token?: null,
      amount?: null,
      toMerge?: null
    ): DepositToMergeInitiatedEventFilter;
    DepositToMergeInitiated(
      l2DepositTxHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      l1Token?: null,
      amount?: null,
      toMerge?: null
    ): DepositToMergeInitiatedEventFilter;

    "WithdrawalFinalized(address,address,uint256)"(
      to?: PromiseOrValue<string> | null,
      l1Token?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawalFinalizedEventFilter;
    WithdrawalFinalized(
      to?: PromiseOrValue<string> | null,
      l1Token?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawalFinalizedEventFilter;
  };

  estimateGas: {
    claimFailedDeposit(
      _depositSender: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToMerge(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeWithdrawal(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2Bridge(overrides?: CallOverrides): Promise<BigNumber>;

    l2TokenAddress(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFailedDeposit(
      _depositSender: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToMerge(
      _l2Receiver: PromiseOrValue<string>,
      _l1Token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _l2TxGasLimit: PromiseOrValue<BigNumberish>,
      _l2TxGasPerPubdataByte: PromiseOrValue<BigNumberish>,
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawal(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWithdrawalFinalized(
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2TokenAddress(
      _l1Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
