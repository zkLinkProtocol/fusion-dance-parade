/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type FeeParamsStruct = {
  pubdataPricingMode: PromiseOrValue<BigNumberish>;
  batchOverheadL1Gas: PromiseOrValue<BigNumberish>;
  maxPubdataPerBatch: PromiseOrValue<BigNumberish>;
  maxL2GasPerBatch: PromiseOrValue<BigNumberish>;
  priorityTxMaxPubdata: PromiseOrValue<BigNumberish>;
  minimalL2GasPrice: PromiseOrValue<BigNumberish>;
};

export type FeeParamsStructOutput = [
  number,
  number,
  number,
  number,
  number,
  BigNumber
] & {
  pubdataPricingMode: number;
  batchOverheadL1Gas: number;
  maxPubdataPerBatch: number;
  maxL2GasPerBatch: number;
  priorityTxMaxPubdata: number;
  minimalL2GasPrice: BigNumber;
};

export type L2MessageStruct = {
  txNumberInBatch: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<string>;
  data: PromiseOrValue<BytesLike>;
};

export type L2MessageStructOutput = [number, string, string] & {
  txNumberInBatch: number;
  sender: string;
  data: string;
};

export declare namespace IMailbox {
  export type ForwardL2RequestStruct = {
    gateway: PromiseOrValue<string>;
    isContractCall: PromiseOrValue<boolean>;
    sender: PromiseOrValue<string>;
    txId: PromiseOrValue<BigNumberish>;
    contractAddressL2: PromiseOrValue<string>;
    l2Value: PromiseOrValue<BigNumberish>;
    l2CallData: PromiseOrValue<BytesLike>;
    l2GasLimit: PromiseOrValue<BigNumberish>;
    l2GasPricePerPubdata: PromiseOrValue<BigNumberish>;
    factoryDeps: PromiseOrValue<BytesLike>[];
    refundRecipient: PromiseOrValue<string>;
  };

  export type ForwardL2RequestStructOutput = [
    string,
    boolean,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string[],
    string
  ] & {
    gateway: string;
    isContractCall: boolean;
    sender: string;
    txId: BigNumber;
    contractAddressL2: string;
    l2Value: BigNumber;
    l2CallData: string;
    l2GasLimit: BigNumber;
    l2GasPricePerPubdata: BigNumber;
    factoryDeps: string[];
    refundRecipient: string;
  };
}

export interface ZkLinkInterface extends utils.Interface {
  functions: {
    "allowLists(address)": FunctionFragment;
    "changeFeeParams((uint8,uint32,uint32,uint32,uint32,uint64))": FunctionFragment;
    "feeParams()": FunctionFragment;
    "gateway()": FunctionFragment;
    "initialize()": FunctionFragment;
    "l2LogsRootHashes(uint256)": FunctionFragment;
    "l2TransactionBaseCost(uint256,uint256,uint256)": FunctionFragment;
    "l2TxHashMap(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "priorityOpSyncStatus(uint256)": FunctionFragment;
    "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)": FunctionFragment;
    "setAllowList(address,bool)": FunctionFragment;
    "setGateway(address)": FunctionFragment;
    "setTxGasPrice(uint256)": FunctionFragment;
    "setValidator(address,bool)": FunctionFragment;
    "syncBatchRoot(uint256,bytes32)": FunctionFragment;
    "syncL2Requests(uint256)": FunctionFragment;
    "syncL2TxHash(bytes32,bytes32)": FunctionFragment;
    "totalBatchesExecuted()": FunctionFragment;
    "totalPriorityTxs()": FunctionFragment;
    "totalSyncedPriorityTxs()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txGasPrice()": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validators(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowLists"
      | "changeFeeParams"
      | "feeParams"
      | "gateway"
      | "initialize"
      | "l2LogsRootHashes"
      | "l2TransactionBaseCost"
      | "l2TxHashMap"
      | "owner"
      | "pause"
      | "paused"
      | "priorityOpSyncStatus"
      | "proveL1ToL2TransactionStatus"
      | "proveL2MessageInclusion"
      | "proxiableUUID"
      | "renounceOwnership"
      | "requestL2Transaction"
      | "setAllowList"
      | "setGateway"
      | "setTxGasPrice"
      | "setValidator"
      | "syncBatchRoot"
      | "syncL2Requests"
      | "syncL2TxHash"
      | "totalBatchesExecuted"
      | "totalPriorityTxs"
      | "totalSyncedPriorityTxs"
      | "transferOwnership"
      | "txGasPrice"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowLists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeParams",
    values: [FeeParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "feeParams", values?: undefined): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHashes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TxHashMap",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priorityOpSyncStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      L2MessageStruct,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGateway",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxGasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncBatchRoot",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncL2Requests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncL2TxHash",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBatchesExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSyncedPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "txGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "allowLists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TxHashMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priorityOpSyncStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncBatchRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncL2Requests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncL2TxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBatchesExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSyncedPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txGasPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractAllowStatusUpdate(address,bool)": EventFragment;
    "InitGateway(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewFeeParams(tuple,tuple)": EventFragment;
    "NewPriorityRequest(uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SyncBatchRoot(uint256,bytes32)": EventFragment;
    "SyncL2Requests(uint256,bytes32,uint256)": EventFragment;
    "SyncL2TxHash(bytes32,bytes32)": EventFragment;
    "TxGasPriceUpdate(uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "ValidatorStatusUpdate(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractAllowStatusUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitGateway"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFeeParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyncBatchRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyncL2Requests"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyncL2TxHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxGasPriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ContractAllowStatusUpdateEventObject {
  contractAddress: string;
  isPermit: boolean;
}
export type ContractAllowStatusUpdateEvent = TypedEvent<
  [string, boolean],
  ContractAllowStatusUpdateEventObject
>;

export type ContractAllowStatusUpdateEventFilter =
  TypedEventFilter<ContractAllowStatusUpdateEvent>;

export interface InitGatewayEventObject {
  gateway: string;
}
export type InitGatewayEvent = TypedEvent<[string], InitGatewayEventObject>;

export type InitGatewayEventFilter = TypedEventFilter<InitGatewayEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewFeeParamsEventObject {
  oldFeeParams: FeeParamsStructOutput;
  newFeeParams: FeeParamsStructOutput;
}
export type NewFeeParamsEvent = TypedEvent<
  [FeeParamsStructOutput, FeeParamsStructOutput],
  NewFeeParamsEventObject
>;

export type NewFeeParamsEventFilter = TypedEventFilter<NewFeeParamsEvent>;

export interface NewPriorityRequestEventObject {
  priorityOpId: BigNumber;
  l2Request: IMailbox.ForwardL2RequestStructOutput;
}
export type NewPriorityRequestEvent = TypedEvent<
  [BigNumber, IMailbox.ForwardL2RequestStructOutput],
  NewPriorityRequestEventObject
>;

export type NewPriorityRequestEventFilter =
  TypedEventFilter<NewPriorityRequestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SyncBatchRootEventObject {
  batchNumber: BigNumber;
  l2LogsRootHash: string;
}
export type SyncBatchRootEvent = TypedEvent<
  [BigNumber, string],
  SyncBatchRootEventObject
>;

export type SyncBatchRootEventFilter = TypedEventFilter<SyncBatchRootEvent>;

export interface SyncL2RequestsEventObject {
  totalSyncedPriorityTxs: BigNumber;
  syncHash: string;
  forwardEthAmount: BigNumber;
}
export type SyncL2RequestsEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SyncL2RequestsEventObject
>;

export type SyncL2RequestsEventFilter = TypedEventFilter<SyncL2RequestsEvent>;

export interface SyncL2TxHashEventObject {
  l2TxHash: string;
  primaryChainL2TxHash: string;
}
export type SyncL2TxHashEvent = TypedEvent<
  [string, string],
  SyncL2TxHashEventObject
>;

export type SyncL2TxHashEventFilter = TypedEventFilter<SyncL2TxHashEvent>;

export interface TxGasPriceUpdateEventObject {
  oldTxGasPrice: BigNumber;
  newTxGasPrice: BigNumber;
}
export type TxGasPriceUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  TxGasPriceUpdateEventObject
>;

export type TxGasPriceUpdateEventFilter =
  TypedEventFilter<TxGasPriceUpdateEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ValidatorStatusUpdateEventObject {
  validatorAddress: string;
  isActive: boolean;
}
export type ValidatorStatusUpdateEvent = TypedEvent<
  [string, boolean],
  ValidatorStatusUpdateEventObject
>;

export type ValidatorStatusUpdateEventFilter =
  TypedEventFilter<ValidatorStatusUpdateEvent>;

export interface ZkLink extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkLinkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowLists(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isPermitToSendL2Request: boolean }>;

    changeFeeParams(
      _newFeeParams: FeeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeParams(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        pubdataPricingMode: number;
        batchOverheadL1Gas: number;
        maxPubdataPerBatch: number;
        maxL2GasPerBatch: number;
        priorityTxMaxPubdata: number;
        minimalL2GasPrice: BigNumber;
      }
    >;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    l2LogsRootHashes(
      batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { l2LogsRootHash: string }>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    l2TxHashMap(
      l2TxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { primaryChainL2TxHash: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priorityOpSyncStatus(
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { hash: string; amount: BigNumber }>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proveL2MessageInclusion(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowList(
      _contractAddress: PromiseOrValue<string>,
      _permitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGateway(
      _gateway: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTxGasPrice(
      _newTxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncBatchRoot(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _l2LogsRootHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncL2Requests(
      _newTotalSyncedPriorityTxs: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncL2TxHash(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _primaryChainL2TxHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBatchesExecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPriorityTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSyncedPriorityTxs(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    txGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validators(
      validatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValidator: boolean }>;
  };

  allowLists(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeFeeParams(
    _newFeeParams: FeeParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeParams(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, BigNumber] & {
      pubdataPricingMode: number;
      batchOverheadL1Gas: number;
      maxPubdataPerBatch: number;
      maxL2GasPerBatch: number;
      priorityTxMaxPubdata: number;
      minimalL2GasPrice: BigNumber;
    }
  >;

  gateway(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  l2LogsRootHashes(
    batchNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  l2TransactionBaseCost(
    _gasPrice: PromiseOrValue<BigNumberish>,
    _l2GasLimit: PromiseOrValue<BigNumberish>,
    _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  l2TxHashMap(
    l2TxHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priorityOpSyncStatus(
    priorityOpId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { hash: string; amount: BigNumber }>;

  proveL1ToL2TransactionStatus(
    _l2TxHash: PromiseOrValue<BytesLike>,
    _l2BatchNumber: PromiseOrValue<BigNumberish>,
    _l2MessageIndex: PromiseOrValue<BigNumberish>,
    _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    _status: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _batchNumber: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _message: L2MessageStruct,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestL2Transaction(
    _contractL2: PromiseOrValue<string>,
    _l2Value: PromiseOrValue<BigNumberish>,
    _calldata: PromiseOrValue<BytesLike>,
    _l2GasLimit: PromiseOrValue<BigNumberish>,
    _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
    _factoryDeps: PromiseOrValue<BytesLike>[],
    _refundRecipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowList(
    _contractAddress: PromiseOrValue<string>,
    _permitted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGateway(
    _gateway: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTxGasPrice(
    _newTxGasPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: PromiseOrValue<string>,
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncBatchRoot(
    _batchNumber: PromiseOrValue<BigNumberish>,
    _l2LogsRootHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncL2Requests(
    _newTotalSyncedPriorityTxs: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncL2TxHash(
    _l2TxHash: PromiseOrValue<BytesLike>,
    _primaryChainL2TxHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  totalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  totalSyncedPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  txGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validators(
    validatorAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allowLists(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeFeeParams(
      _newFeeParams: FeeParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    feeParams(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        pubdataPricingMode: number;
        batchOverheadL1Gas: number;
        maxPubdataPerBatch: number;
        maxL2GasPerBatch: number;
        priorityTxMaxPubdata: number;
        minimalL2GasPrice: BigNumber;
      }
    >;

    gateway(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    l2LogsRootHashes(
      batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TxHashMap(
      l2TxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priorityOpSyncStatus(
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { hash: string; amount: BigNumber }>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAllowList(
      _contractAddress: PromiseOrValue<string>,
      _permitted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGateway(
      _gateway: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTxGasPrice(
      _newTxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    syncBatchRoot(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _l2LogsRootHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    syncL2Requests(
      _newTotalSyncedPriorityTxs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    syncL2TxHash(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _primaryChainL2TxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    totalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalSyncedPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    txGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validators(
      validatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ContractAllowStatusUpdate(address,bool)"(
      contractAddress?: null,
      isPermit?: null
    ): ContractAllowStatusUpdateEventFilter;
    ContractAllowStatusUpdate(
      contractAddress?: null,
      isPermit?: null
    ): ContractAllowStatusUpdateEventFilter;

    "InitGateway(address)"(gateway?: null): InitGatewayEventFilter;
    InitGateway(gateway?: null): InitGatewayEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewFeeParams(tuple,tuple)"(
      oldFeeParams?: null,
      newFeeParams?: null
    ): NewFeeParamsEventFilter;
    NewFeeParams(
      oldFeeParams?: null,
      newFeeParams?: null
    ): NewFeeParamsEventFilter;

    "NewPriorityRequest(uint256,tuple)"(
      priorityOpId?: null,
      l2Request?: null
    ): NewPriorityRequestEventFilter;
    NewPriorityRequest(
      priorityOpId?: null,
      l2Request?: null
    ): NewPriorityRequestEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SyncBatchRoot(uint256,bytes32)"(
      batchNumber?: null,
      l2LogsRootHash?: null
    ): SyncBatchRootEventFilter;
    SyncBatchRoot(
      batchNumber?: null,
      l2LogsRootHash?: null
    ): SyncBatchRootEventFilter;

    "SyncL2Requests(uint256,bytes32,uint256)"(
      totalSyncedPriorityTxs?: null,
      syncHash?: null,
      forwardEthAmount?: null
    ): SyncL2RequestsEventFilter;
    SyncL2Requests(
      totalSyncedPriorityTxs?: null,
      syncHash?: null,
      forwardEthAmount?: null
    ): SyncL2RequestsEventFilter;

    "SyncL2TxHash(bytes32,bytes32)"(
      l2TxHash?: null,
      primaryChainL2TxHash?: null
    ): SyncL2TxHashEventFilter;
    SyncL2TxHash(
      l2TxHash?: null,
      primaryChainL2TxHash?: null
    ): SyncL2TxHashEventFilter;

    "TxGasPriceUpdate(uint256,uint256)"(
      oldTxGasPrice?: null,
      newTxGasPrice?: null
    ): TxGasPriceUpdateEventFilter;
    TxGasPriceUpdate(
      oldTxGasPrice?: null,
      newTxGasPrice?: null
    ): TxGasPriceUpdateEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "ValidatorStatusUpdate(address,bool)"(
      validatorAddress?: null,
      isActive?: null
    ): ValidatorStatusUpdateEventFilter;
    ValidatorStatusUpdate(
      validatorAddress?: null,
      isActive?: null
    ): ValidatorStatusUpdateEventFilter;
  };

  estimateGas: {
    allowLists(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeFeeParams(
      _newFeeParams: FeeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeParams(overrides?: CallOverrides): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    l2LogsRootHashes(
      batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TxHashMap(
      l2TxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priorityOpSyncStatus(
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowList(
      _contractAddress: PromiseOrValue<string>,
      _permitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGateway(
      _gateway: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTxGasPrice(
      _newTxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncBatchRoot(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _l2LogsRootHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncL2Requests(
      _newTotalSyncedPriorityTxs: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncL2TxHash(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _primaryChainL2TxHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBatchesExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    totalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    totalSyncedPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    txGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validators(
      validatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowLists(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeFeeParams(
      _newFeeParams: FeeParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    l2LogsRootHashes(
      batchNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TransactionBaseCost(
      _gasPrice: PromiseOrValue<BigNumberish>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TxHashMap(
      l2TxHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priorityOpSyncStatus(
      priorityOpId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _l2BatchNumber: PromiseOrValue<BigNumberish>,
      _l2MessageIndex: PromiseOrValue<BigNumberish>,
      _l2TxNumberInBatch: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _message: L2MessageStruct,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _contractL2: PromiseOrValue<string>,
      _l2Value: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      _l2GasLimit: PromiseOrValue<BigNumberish>,
      _l2GasPerPubdataByteLimit: PromiseOrValue<BigNumberish>,
      _factoryDeps: PromiseOrValue<BytesLike>[],
      _refundRecipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowList(
      _contractAddress: PromiseOrValue<string>,
      _permitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGateway(
      _gateway: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTxGasPrice(
      _newTxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncBatchRoot(
      _batchNumber: PromiseOrValue<BigNumberish>,
      _l2LogsRootHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncL2Requests(
      _newTotalSyncedPriorityTxs: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncL2TxHash(
      _l2TxHash: PromiseOrValue<BytesLike>,
      _primaryChainL2TxHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBatchesExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPriorityTxs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSyncedPriorityTxs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    txGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validators(
      validatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
